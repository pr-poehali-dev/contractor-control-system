import { useState, useEffect } from 'react';
import Joyride, { CallBackProps, STATUS, Step, ACTIONS, EVENTS } from 'react-joyride';

interface OnboardingTourProps {
  onComplete: () => void;
  onSkip: () => void;
}

const OnboardingTour = ({ onComplete, onSkip }: OnboardingTourProps) => {
  const [run, setRun] = useState(false);

  useEffect(() => {
    const timer = setTimeout(() => {
      setRun(true);
    }, 500);
    
    return () => clearTimeout(timer);
  }, []);

  const steps: Step[] = [
    {
      target: 'body',
      content: (
        <div className="space-y-3">
          <h3 className="text-lg font-semibold text-slate-900">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ–º! üëã</h3>
          <p className="text-sm text-slate-600">
            –î–∞–≤–∞–π—Ç–µ –∑–∞ –º–∏–Ω—É—Ç—É –ø–æ–∫–∞–∂–µ–º, –∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å –≤–∞—à –ø–µ—Ä–≤—ã–π –æ–±—ä–µ–∫—Ç –∏ –Ω–∞—á–∞—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—ã.
          </p>
        </div>
      ),
      placement: 'center',
      disableBeacon: true,
    },
    {
      target: '[data-tour="dashboard-tab"]',
      content: (
        <div className="space-y-2">
          <h4 className="font-semibold text-slate-900">–õ–µ–Ω—Ç–∞ —Å–æ–±—ã—Ç–∏–π</h4>
          <p className="text-sm text-slate-600">
            –ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤—Å–µ —Å–æ–±—ã—Ç–∏—è: –æ—Ç—á—ë—Ç—ã –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤, –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –≤–∞—à–∏–º –æ–±—ä–µ–∫—Ç–∞–º.
          </p>
        </div>
      ),
      placement: 'bottom',
      disableBeacon: true,
    },
    {
      target: '[data-tour="objects-tab"]',
      content: (
        <div className="space-y-2">
          <h4 className="font-semibold text-slate-900">–†–µ–µ—Å—Ç—Ä –æ–±—ä–µ–∫—Ç–æ–≤</h4>
          <p className="text-sm text-slate-600">
            –ó–¥–µ—Å—å –≤—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ –≤—Å–µ–º–∏ –≤–∞—à–∏–º–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —ç—Ç—É –≤–∫–ª–∞–¥–∫—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–±—ä–µ–∫—Ç–∞–º!
          </p>
        </div>
      ),
      placement: 'bottom',
      disableBeacon: true,
    },
    {
      target: '[data-tour="work-templates-tab"]',
      content: (
        <div className="space-y-2">
          <h4 className="font-semibold text-slate-900">–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ä–∞–±–æ—Ç</h4>
          <p className="text-sm text-slate-600">
            –í —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–∏–¥—ã —Ä–∞–±–æ—Ç –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞.
          </p>
        </div>
      ),
      placement: 'bottom',
      disableBeacon: true,
    },
    {
      target: '[data-tour="contractors-tab"]',
      content: (
        <div className="space-y-2">
          <h4 className="font-semibold text-slate-900">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞–º–∏</h4>
          <p className="text-sm text-slate-600">
            –î–æ–±–∞–≤–ª—è–π—Ç–µ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤, –Ω–∞–∑–Ω–∞—á–∞–π—Ç–µ –∏—Ö –Ω–∞ —Ä–∞–±–æ—Ç—ã –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
          </p>
        </div>
      ),
      placement: 'bottom',
      disableBeacon: true,
    },
    {
      target: 'body',
      content: (
        <div className="space-y-3">
          <h3 className="text-lg font-semibold text-slate-900">–û—Ç–ª–∏—á–Ω–æ! üéâ</h3>
          <p className="text-sm text-slate-600">
            –¢–µ–ø–µ—Ä—å –≤—ã –∑–Ω–∞–µ—Ç–µ –æ—Å–Ω–æ–≤—ã. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –æ–±—ä–µ–∫—Ç—ã, –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Ä–∞–±–æ—Ç—ã –∏ –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞!
          </p>
        </div>
      ),
      placement: 'center',
      disableBeacon: true,
    },
  ];

  const handleJoyrideCallback = (data: CallBackProps) => {
    const { status, type, action } = data;

    if (([STATUS.FINISHED, STATUS.SKIPPED] as string[]).includes(status)) {
      setRun(false);
      if (status === STATUS.FINISHED) {
        onComplete();
      } else {
        onSkip();
      }
    }

    if (type === EVENTS.STEP_AFTER && action === ACTIONS.CLOSE) {
      setRun(false);
      onSkip();
    }
  };

  return (
    <Joyride
      steps={steps}
      run={run}
      continuous
      showProgress
      showSkipButton
      scrollToFirstStep
      disableOverlayClose
      disableCloseOnEsc
      spotlightClicks={false}
      callback={handleJoyrideCallback}
      styles={{
        options: {
          primaryColor: '#3b82f6',
          zIndex: 10000,
        },
        tooltip: {
          borderRadius: 12,
          padding: 20,
        },
        buttonNext: {
          backgroundColor: '#3b82f6',
          borderRadius: 8,
          padding: '8px 16px',
          fontSize: 14,
          fontWeight: 500,
        },
        buttonBack: {
          color: '#64748b',
          marginRight: 8,
        },
        buttonSkip: {
          color: '#64748b',
          fontSize: 13,
        },
      }}
      locale={{
        back: '–ù–∞–∑–∞–¥',
        close: '–ó–∞–∫—Ä—ã—Ç—å',
        last: '–ó–∞–≤–µ—Ä—à–∏—Ç—å',
        next: '–î–∞–ª–µ–µ',
        skip: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç—É—Ä',
      }}
      floaterProps={{
        disableAnimation: false,
      }}
    />
  );
};

export default OnboardingTour;