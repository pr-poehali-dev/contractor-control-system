import type { Work } from '@/store/slices/userSlice';

export interface WorkStatus {
  status: 'planned' | 'awaiting_start' | 'in_progress' | 'awaiting_acceptance' | 'completed' | 'delayed';
  daysDelayed: number;
  message: string;
  color: string;
  icon: string;
}

export function getWorkStatusInfo(work: Work): WorkStatus {
  const today = new Date();
  today.setHours(0, 0, 0, 0);

  if (!work.planned_start_date) {
    return {
      status: 'planned',
      daysDelayed: 0,
      message: '–ü–ª–∞–Ω–æ–≤–∞—è',
      color: 'text-slate-600 bg-slate-100',
      icon: 'üìã'
    };
  }

  const startDate = new Date(work.planned_start_date);
  startDate.setHours(0, 0, 0, 0);
  
  const endDate = work.planned_end_date ? new Date(work.planned_end_date) : null;
  if (endDate) endDate.setHours(0, 0, 0, 0);

  // –†–∞–±–æ—Ç–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å
  if (today < startDate) {
    return {
      status: 'planned',
      daysDelayed: 0,
      message: '–ü–ª–∞–Ω–æ–≤–∞—è',
      color: 'text-slate-600 bg-slate-100',
      icon: 'üìã'
    };
  }

  // –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—É–ø–∏–ª–∞, –Ω–æ —Ä–∞–±–æ—Ç—ã –Ω–µ –Ω–∞—á–∞–ª–∏—Å—å (start_date –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω –∏ –ø—Ä–æ—Ü–µ–Ω—Ç = 0)
  if (!work.start_date && (work.completion_percentage || 0) === 0) {
    const daysDelayed = Math.floor((today.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));
    return {
      status: 'awaiting_start',
      daysDelayed,
      message: daysDelayed > 0 
        ? `–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (‚àí${daysDelayed} –¥–Ω.)`
        : '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
      color: daysDelayed > 0 ? 'text-red-700 bg-red-100' : 'text-amber-700 bg-amber-100',
      icon: '‚è≥'
    };
  }

  // –†–∞–±–æ—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã –Ω–∞ 100%
  if (work.completion_percentage >= 100) {
    if (endDate && today > endDate) {
      const daysDelayed = Math.floor((today.getTime() - endDate.getTime()) / (1000 * 60 * 60 * 24));
      return {
        status: 'awaiting_acceptance',
        daysDelayed,
        message: `–ì–æ—Ç–æ–≤–æ –∫ –ø—Ä–∏–µ–º–∫–µ (‚àí${daysDelayed} –¥–Ω.)`,
        color: 'text-amber-700 bg-amber-100',
        icon: '‚úÖ'
      };
    }
    return {
      status: 'awaiting_acceptance',
      daysDelayed: 0,
      message: '–ì–æ—Ç–æ–≤–æ –∫ –ø—Ä–∏–µ–º–∫–µ',
      color: 'text-blue-700 bg-blue-100',
      icon: '‚úÖ'
    };
  }

  // –†–∞–±–æ—Ç—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ã
  if (endDate && today > endDate) {
    const daysDelayed = Math.floor((today.getTime() - endDate.getTime()) / (1000 * 60 * 60 * 24));
    return {
      status: 'delayed',
      daysDelayed,
      message: `–° –∑–∞–¥–µ—Ä–∂–∫–æ–π (‚àí${daysDelayed} –¥–Ω.)`,
      color: 'text-red-700 bg-red-100',
      icon: '‚ö†Ô∏è'
    };
  }

  // –†–∞–±–æ—Ç—ã –∏–¥—É—Ç –ø–æ –ø–ª–∞–Ω—É
  return {
    status: 'in_progress',
    daysDelayed: 0,
    message: `–í –ø—Ä–æ—Ü–µ—Å—Å–µ (${work.completion_percentage}%)`,
    color: 'text-green-700 bg-green-100',
    icon: 'üî®'
  };
}

export function formatDateRange(startDate?: string, endDate?: string): string {
  if (!startDate) return '–î–∞—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã';
  
  const start = new Date(startDate);
  const end = endDate ? new Date(endDate) : null;
  
  const formatOptions: Intl.DateTimeFormatOptions = { day: 'numeric', month: 'short' };
  
  if (end) {
    return `${start.toLocaleDateString('ru-RU', formatOptions)} ‚Äî ${end.toLocaleDateString('ru-RU', formatOptions)}`;
  }
  
  return `—Å ${start.toLocaleDateString('ru-RU', formatOptions)}`;
}

export interface ObjectStatus {
  status: 'planning' | 'in_progress' | 'completed';
  message: string;
  color: string;
  icon: string;
}

export function getObjectStatusInfo(works: Work[]): ObjectStatus {
  if (works.length === 0) {
    return {
      status: 'planning',
      message: '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ',
      color: 'text-slate-600 bg-slate-100',
      icon: 'üìã'
    };
  }

  const allCompleted = works.every(work => work.completion_percentage >= 100);
  if (allCompleted) {
    return {
      status: 'completed',
      message: '–†–∞–±–æ—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã',
      color: 'text-green-700 bg-green-100',
      icon: '‚úÖ'
    };
  }

  const anyStarted = works.some(work => work.start_date || (work.completion_percentage || 0) > 0);
  if (anyStarted) {
    return {
      status: 'in_progress',
      message: '–†–∞–±–æ—Ç—ã –Ω–∞—á–∞—Ç—ã',
      color: 'text-blue-700 bg-blue-100',
      icon: 'üî®'
    };
  }

  return {
    status: 'planning',
    message: '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ',
    color: 'text-slate-600 bg-slate-100',
    icon: 'üìã'
  };
}