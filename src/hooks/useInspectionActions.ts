import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuthRedux } from '@/hooks/useAuthRedux';
import { useToast } from '@/hooks/use-toast';
import { Defect } from '@/components/inspection/DefectsSection';
import { apiClient } from '@/api/apiClient';
import { ENDPOINTS } from '@/api/endpoints';
import { ROUTES } from '@/constants/routes';
import { useAppDispatch } from '@/store/hooks';
import { updateInspection } from '@/store/slices/inspectionsSlice';

export function useInspectionActions(
  inspection: any,
  defects: Defect[],
  setDefects: (defects: Defect[]) => void,
  setDefectReport: (report: any) => void,
  defectReport?: any
) {
  const navigate = useNavigate();
  const { userData, user, loadUserData } = useAuthRedux();
  const { toast } = useToast();
  const dispatch = useAppDispatch();
  const [loading, setLoading] = useState(false);
  const [loadingReport, setLoadingReport] = useState(false);

  const handleBack = () => {
    sessionStorage.removeItem('inspectionFromPage');
    navigate(-1);
  };

  const handleCompleteInspection = async () => {
    if (!user?.id) return;
    
    setLoading(true);
    try {
      await dispatch(updateInspection({
        id: inspection.id,
        data: {
          status: 'completed',
          defects: JSON.stringify(defects),
          completed_at: new Date().toISOString()
        }
      })).unwrap();
      
      await loadUserData();
      
      toast({ title: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞' });
      handleBack();
    } catch (error) {
      toast({ 
        title: '–û—à–∏–±–∫–∞', 
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É',
        variant: 'destructive'
      });
    } finally {
      setLoading(false);
    }
  };

  const handleSaveDraft = async () => {
    setLoading(true);
    try {
      await dispatch(updateInspection({
        id: inspection.id,
        data: {
          defects: JSON.stringify(defects)
        }
      })).unwrap();
      
      await loadUserData();
      
      toast({ title: '–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã' });
    } catch (error) {
      toast({ 
        title: '–û—à–∏–±–∫–∞', 
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å',
        variant: 'destructive'
      });
    } finally {
      setLoading(false);
    }
  };

  const handleStartInspection = async () => {
    if (!user?.id) return;
    
    setLoading(true);
    try {
      await dispatch(updateInspection({
        id: inspection.id,
        data: {
          status: 'active',
          defects: JSON.stringify(defects)
        }
      })).unwrap();
      
      await loadUserData();
      
      toast({ title: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞—Ç–∞' });
    } catch (error) {
      toast({ 
        title: '–û—à–∏–±–∫–∞', 
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É',
        variant: 'destructive'
      });
    } finally {
      setLoading(false);
    }
  };

  const handleAddDefect = (newDefect: Defect, newDefectPhotos: string[]) => {
    if (!newDefect.description.trim()) {
      toast({ title: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è', variant: 'destructive' });
      return false;
    }

    const defect: Defect = {
      ...newDefect,
      id: Date.now().toString(),
      photo_urls: newDefectPhotos.length > 0 ? newDefectPhotos : undefined
    };

    setDefects([...defects, defect]);
    toast({ title: '–ó–∞–º–µ—á–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ' });
    return true;
  };

  const handleRemoveDefect = (id: string) => {
    setDefects(defects.filter(d => d.id !== id));
  };

  const handleCreateDefectReport = async () => {
    if (!user?.id || defects.length === 0 || !inspection?.id) {
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –∞–∫—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω (–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    if (inspection.defect_report_document_id && defectReport) {
      toast({ 
        title: '–ê–∫—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω', 
        description: '–î–ª—è —ç—Ç–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–∂–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∞–∫—Ç –æ–± –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤',
        variant: 'destructive'
      });
      return;
    }
    
    setLoadingReport(true);
    try {
      // 1. –ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω "–ê–∫—Ç –æ–± –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤" –ø–æ system_key
      const templatesResponse = await apiClient.get(ENDPOINTS.DOCUMENTS.TEMPLATES);
      const templates = templatesResponse.data?.templates || [];
      console.log('üìã Available templates:', templates.map((t: any) => ({ id: t.id, name: t.name, system_key: t.system_key })));
      const defectTemplate = templates.find((t: any) => t.system_key === 'defect_detection_act');
      console.log('‚úÖ Found defect template:', defectTemplate);
      
      if (!defectTemplate) {
        throw new Error('–®–∞–±–ª–æ–Ω "–ê–∫—Ç –æ–± –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤" –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      // 2. –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –∏ –æ–±—ä–µ–∫—Ç–∞
      let work: any = null;
      let object: any = null;
      
      // –ò—â–µ–º —Ä–∞–±–æ—Ç—É –≤–æ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–∞—Ö
      for (const obj of userData?.objects || []) {
        const foundWork = obj.works?.find((w: any) => w.id === inspection.work_id);
        if (foundWork) {
          work = foundWork;
          object = obj;
          break;
        }
      }
      
      if (!work || !object) {
        throw new Error('–†–∞–±–æ—Ç–∞ –∏–ª–∏ –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∞–∫—Ç–∞
      const reportNumber = `–ê–ö–¢-${work.id}-${inspection.id}-${Date.now()}`;
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
      const defectsDescription = defects.map((d: any, index: number) => 
        `<p><strong>–î–µ—Ñ–µ–∫—Ç ${index + 1}:</strong> ${d.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}<br/>
        <strong>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</strong> ${d.location || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}<br/>
        <strong>–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å:</strong> ${d.severity === 'critical' ? '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è' : d.severity === 'high' ? '–í—ã—Å–æ–∫–∞—è' : '–°—Ä–µ–¥–Ω—è—è'}<br/>
        <strong>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</strong> ${d.responsible || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}<br/>
        <strong>–°—Ä–æ–∫ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è:</strong> ${d.deadline || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>`
      ).join('');
      
      // 3. –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
      const contentData = {
        date: new Date().toLocaleDateString('ru-RU'),
        object_name: object?.title || '–ù–µ —É–∫–∞–∑–∞–Ω',
        object_address: object?.address || '',
        client_representative: user?.name || '–ù–µ —É–∫–∞–∑–∞–Ω',
        contractor_representative: work?.contractor_name || '–ù–µ —É–∫–∞–∑–∞–Ω',
        defects_description: defectsDescription,
        deadline_date: defects[0]?.deadline ? new Date(defects[0].deadline).toLocaleDateString('ru-RU') : '–ù–µ —É–∫–∞–∑–∞–Ω',
        reportNumber: reportNumber,
        totalDefects: defects.length,
        criticalDefects: defects.filter((d: any) => d.severity === 'critical').length,
        inspectionNumber: inspection.inspection_number || '',
        workName: work?.title || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
      };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω (–ë–ï–ó –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö)
      const templateHtml = defectTemplate.content?.html || '';
      
      const documentData = {
        work_id: inspection.work_id,
        templateId: defectTemplate.id,
        title: `–ê–∫—Ç –æ–± –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤ ‚Ññ${reportNumber}`,
        status: 'draft',
        contentData: contentData,
        htmlContent: templateHtml  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω —Å {{–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏}}
      };
      
      // 4. –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
      const docResponse = await apiClient.post(ENDPOINTS.DOCUMENTS.CREATE, documentData);
      
      if (!docResponse.success) {
        throw new Error(docResponse.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç');
      }
      
      // 5. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ
      await dispatch(updateInspection({
        id: inspection.id,
        data: {
          defect_report_document_id: docResponse.data.id
        }
      })).unwrap();
      
      await loadUserData();
      
      setDefectReport({
        id: docResponse.data.id,
        report_number: reportNumber,
        total_defects: defects.length,
        critical_defects: defects.filter((d: any) => d.severity === 'critical').length,
        created_at: docResponse.data.createdAt || new Date().toISOString()
      });
      
      const documentId = docResponse.data.id;
      toast({ 
        title: '–ê–∫—Ç —Å–æ–∑–¥–∞–Ω!', 
        description: `–ê–∫—Ç ‚Ññ${reportNumber} —Å–æ—Ö—Ä–∞–Ω—ë–Ω`,
        onClick: () => navigate(ROUTES.DOCUMENT_VIEW(documentId))
      });
      
    } catch (error: any) {
      console.error('Error creating report:', error);
      toast({ 
        title: '–û—à–∏–±–∫–∞', 
        description: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç',
        variant: 'destructive'
      });
    } finally {
      setLoadingReport(false);
    }
  };

  return {
    loading,
    loadingReport,
    handleBack,
    handleCompleteInspection,
    handleSaveDraft,
    handleStartInspection,
    handleAddDefect,
    handleRemoveDefect,
    handleCreateDefectReport
  };
}