import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuthRedux } from '@/hooks/useAuthRedux';
import { useToast } from '@/hooks/use-toast';
import { Defect } from '@/components/inspection/DefectsSection';
import { apiClient } from '@/api/apiClient';
import { ENDPOINTS } from '@/api/endpoints';
import { useAppDispatch } from '@/store/hooks';
import { updateInspection } from '@/store/slices/inspectionsSlice';

export function useInspectionActions(
  inspection: any,
  defects: Defect[],
  setDefects: (defects: Defect[]) => void,
  setDefectReport: (report: any) => void
) {
  const navigate = useNavigate();
  const { userData, user, loadUserData } = useAuthRedux();
  const { toast } = useToast();
  const dispatch = useAppDispatch();
  const [loading, setLoading] = useState(false);
  const [loadingReport, setLoadingReport] = useState(false);

  const handleBack = () => {
    sessionStorage.removeItem('inspectionFromPage');
    navigate(-1);
  };

  const handleCompleteInspection = async () => {
    if (!user?.id) return;
    
    setLoading(true);
    try {
      await dispatch(updateInspection({
        id: inspection.id,
        data: {
          status: 'completed',
          defects: JSON.stringify(defects),
          completed_at: new Date().toISOString()
        }
      })).unwrap();
      
      await loadUserData();
      
      toast({ title: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞' });
      handleBack();
    } catch (error) {
      toast({ 
        title: '–û—à–∏–±–∫–∞', 
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É',
        variant: 'destructive'
      });
    } finally {
      setLoading(false);
    }
  };

  const handleSaveDraft = async () => {
    setLoading(true);
    try {
      await dispatch(updateInspection({
        id: inspection.id,
        data: {
          defects: JSON.stringify(defects)
        }
      })).unwrap();
      
      await loadUserData();
      
      toast({ title: '–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã' });
    } catch (error) {
      toast({ 
        title: '–û—à–∏–±–∫–∞', 
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å',
        variant: 'destructive'
      });
    } finally {
      setLoading(false);
    }
  };

  const handleStartInspection = async () => {
    if (!user?.id) return;
    
    setLoading(true);
    try {
      await dispatch(updateInspection({
        id: inspection.id,
        data: {
          status: 'active',
          defects: JSON.stringify(defects)
        }
      })).unwrap();
      
      await loadUserData();
      
      toast({ title: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞—Ç–∞' });
    } catch (error) {
      toast({ 
        title: '–û—à–∏–±–∫–∞', 
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É',
        variant: 'destructive'
      });
    } finally {
      setLoading(false);
    }
  };

  const handleAddDefect = (newDefect: Defect, newDefectPhotos: string[]) => {
    if (!newDefect.description.trim()) {
      toast({ title: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è', variant: 'destructive' });
      return false;
    }

    const defect: Defect = {
      ...newDefect,
      id: Date.now().toString(),
      photo_urls: newDefectPhotos.length > 0 ? newDefectPhotos : undefined
    };

    setDefects([...defects, defect]);
    toast({ title: '–ó–∞–º–µ—á–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ' });
    return true;
  };

  const handleRemoveDefect = (id: string) => {
    setDefects(defects.filter(d => d.id !== id));
  };

  const handleCreateDefectReport = async () => {
    if (!user?.id || defects.length === 0 || !inspection?.id) {
      return;
    }
    
    setLoadingReport(true);
    try {
      // 1. –°–æ–∑–¥–∞—Ç—å defect_report
      const reportResponse = await apiClient.post(ENDPOINTS.DEFECTS.REPORTS, {
        inspection_id: parseInt(inspection.id.toString()),
        notes: ''
      });
      
      if (!reportResponse.success) {
        console.error('Failed to create report:', reportResponse.error);
        throw new Error(reportResponse.error || 'Failed to create report');
      }
      
      const defectReportData = reportResponse.data;
      setDefectReport(defectReportData);
      
      // 2. –ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω "–ê–∫—Ç –æ–± –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤" –ø–æ system_key
      const templatesResponse = await apiClient.get(ENDPOINTS.DOCUMENTS.TEMPLATES);
      const templates = templatesResponse.data?.templates || [];
      console.log('üìã Available templates:', templates.map((t: any) => ({ id: t.id, name: t.name, system_key: t.system_key })));
      const defectTemplate = templates.find((t: any) => t.system_key === 'defect_detection_act');
      console.log('‚úÖ Found defect template:', defectTemplate);
      
      if (defectTemplate) {
        // 3. –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –∏ –æ–±—ä–µ–∫—Ç–∞
        const work = userData?.works?.find((w: any) => w.id === inspection.work_id);
        const object = userData?.objects?.find((o: any) => o.id === work?.object_id);
        
        // 4. –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
        const documentData = {
          work_id: inspection.work_id,
          template_id: defectTemplate.id,
          document_type: 'defect_act',
          title: `–ê–∫—Ç –æ–± –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤ ‚Ññ${defectReportData.report_number}`,
          status: 'draft',
          content: {
            title: `–ê–ö–¢ –û–ë –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ò –î–ï–§–ï–ö–¢–û–í ‚Ññ${defectReportData.report_number}`,
            date: new Date().toLocaleDateString('ru-RU'),
            objectName: `–û–±—ä–µ–∫—Ç: ${object?.title || '–ù–µ —É–∫–∞–∑–∞–Ω'}`,
            objectAddress: object?.address || '',
            workName: `–†–∞–±–æ—Ç–∞: ${work?.title || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`,
            inspectionNumber: `–ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Ññ${inspection.inspection_number || ''}`,
            defects: defects.map((d: any, idx: number) => 
              `${idx + 1}. ${d.description}\n   –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${d.location || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n   –°–µ—Ä—å—ë–∑–Ω–æ—Å—Ç—å: ${d.severity || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`
            ).join('\n\n'),
            totalDefects: defects.length,
            criticalDefects: defects.filter((d: any) => d.severity === '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π').length,
            reportNumber: defectReportData.report_number
          }
        };
        
        // 5. –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
        const docResponse = await apiClient.post(ENDPOINTS.DOCUMENTS.BASE, documentData);
        
        if (docResponse.success) {
          toast({ 
            title: '–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω!', 
            description: `–ê–∫—Ç ‚Ññ${defectReportData.report_number} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ä–∞–∑–¥–µ–ª–µ "–î–æ–∫—É–º–µ–Ω—Ç—ã"`,
            action: {
              label: '–û—Ç–∫—Ä—ã—Ç—å',
              onClick: () => navigate(`/document/${docResponse.data.id}`)
            }
          });
        }
      } else {
        toast({ 
          title: '–û—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω', 
          description: `–ê–∫—Ç ‚Ññ${defectReportData.report_number}. –®–∞–±–ª–æ–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–æ–∑–¥–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –≤—Ä—É—á–Ω—É—é.`
        });
      }
      
      await loadUserData();
      
    } catch (error: any) {
      console.error('Error creating report:', error);
      toast({ 
        title: '–û—à–∏–±–∫–∞', 
        description: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç',
        variant: 'destructive'
      });
    } finally {
      setLoadingReport(false);
    }
  };

  return {
    loading,
    loadingReport,
    handleBack,
    handleCompleteInspection,
    handleSaveDraft,
    handleStartInspection,
    handleAddDefect,
    handleRemoveDefect,
    handleCreateDefectReport
  };
}