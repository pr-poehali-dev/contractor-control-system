import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuthRedux } from '@/hooks/useAuthRedux';
import { useAppDispatch } from '@/store/hooks';
import { createObject } from '@/store/slices/objectsSlice';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import Icon from '@/components/ui/icon';
import { useToast } from '@/hooks/use-toast';

const CreateObject = () => {
  const navigate = useNavigate();
  const { toast } = useToast();
  const { user, loadUserData } = useAuthRedux();
  const dispatch = useAppDispatch();
  const [formData, setFormData] = useState({
    title: '',
    address: '',
    area: '',
    floors: '',
    building_type: '',
    construction_year: '',
    responsible_person: '',
    phone: '',
  });
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.title.trim()) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞',
        variant: 'destructive',
      });
      return;
    }

    if (!user) return;

    setIsSubmitting(true);

    try {
      const result = await dispatch(createObject({
        title: formData.title,
        address: formData.address,
        status: 'active',
      })).unwrap();

      await loadUserData();

      toast({
        title: '–û–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω!',
        description: `–û–±—ä–µ–∫—Ç "${formData.title}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω`,
      });

      setTimeout(() => {
        navigate('/objects');
      }, 300);
    } catch (error) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç',
        variant: 'destructive',
      });
      setIsSubmitting(false);
    }
  };

  return (
    <div className="min-h-screen bg-slate-50 p-4 md:p-8 pb-24 md:pb-8">
      <Button 
        variant="ghost" 
        className="mb-6"
        onClick={() => navigate('/objects')}
      >
        <Icon name="ChevronLeft" size={20} className="mr-2" />
        –ù–∞–∑–∞–¥
      </Button>

      <div className="mb-8">
        <h1 className="text-2xl md:text-3xl font-bold text-slate-900 mb-2">–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞</h1>
        <p className="text-slate-600">–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞</p>
      </div>

      <form onSubmit={handleSubmit}>
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div className="lg:col-span-2 space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="title">–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ *</Label>
                <Input
                  id="title"
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 10"
                  value={formData.title}
                  onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                  required
                  autoFocus
                  data-tour="object-title-input"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="address">–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å *</Label>
                <Input
                  id="address"
                  placeholder="–≥. –ö–∞–∑–∞–Ω—å, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 10"
                  value={formData.address}
                  onChange={(e) => setFormData({ ...formData, address: e.target.value })}
                  required
                />
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="area">–ü–ª–æ—â–∞–¥—å (–º¬≤)</Label>
                  <Input
                    id="area"
                    type="number"
                    placeholder="0"
                    value={formData.area}
                    onChange={(e) => setFormData({ ...formData, area: e.target.value })}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="floors">–≠—Ç–∞–∂–Ω–æ—Å—Ç—å</Label>
                  <Input
                    id="floors"
                    type="number"
                    placeholder="0"
                    value={formData.floors}
                    onChange={(e) => setFormData({ ...formData, floors: e.target.value })}
                  />
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="building_type">–¢–∏–ø –∑–¥–∞–Ω–∏—è</Label>
                  <Input
                    id="building_type"
                    placeholder="–ñ–∏–ª–æ–π –¥–æ–º, –æ—Ñ–∏—Å..."
                    value={formData.building_type}
                    onChange={(e) => setFormData({ ...formData, building_type: e.target.value })}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="construction_year">–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏</Label>
                  <Input
                    id="construction_year"
                    type="number"
                    placeholder="2024"
                    value={formData.construction_year}
                    onChange={(e) => setFormData({ ...formData, construction_year: e.target.value })}
                  />
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="responsible_person">–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ</Label>
                  <Input
                    id="responsible_person"
                    placeholder="–§–ò–û"
                    value={formData.responsible_person}
                    onChange={(e) => setFormData({ ...formData, responsible_person: e.target.value })}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="phone">–¢–µ–ª–µ—Ñ–æ–Ω</Label>
                  <Input
                    id="phone"
                    placeholder="+7 (900) 123-45-67"
                    value={formData.phone}
                    onChange={(e) => setFormData({ ...formData, phone: e.target.value })}
                  />
                </div>
              </div>
            </CardContent>
          </Card>

          <div className="flex flex-col md:flex-row gap-3 lg:col-span-2">
          <Button 
            type="submit" 
            size="lg" 
            className="md:min-w-[200px]"
            disabled={isSubmitting}
            data-tour="create-object-submit"
          >
            {isSubmitting ? (
              <>
                <Icon name="Loader2" size={20} className="mr-2 animate-spin" />
                –°–æ–∑–¥–∞–Ω–∏–µ...
              </>
            ) : (
              <>
                <Icon name="Save" size={20} className="mr-2" />
                –°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç
              </>
            )}
          </Button>
          <Button 
            type="button" 
            variant="outline" 
            size="lg"
            onClick={() => navigate('/objects')}
            disabled={isSubmitting}
          >
            –û—Ç–º–µ–Ω–∞
          </Button>
          </div>
        </div>

        <aside className="space-y-6">
          <Card className="bg-gradient-to-br from-blue-50 to-indigo-50 border-blue-200">
            <CardHeader>
              <CardTitle className="text-base flex items-center gap-2">
                <Icon name="Lightbulb" className="text-blue-600" size={18} />
                –°–æ–≤–µ—Ç—ã –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-3 text-sm text-slate-700">
              <div className="space-y-2">
                <p className="font-medium text-slate-900">üèóÔ∏è –ê–¥—Ä–µ—Å</p>
                <p className="text-xs">–£–∫–∞–∑—ã–≤–∞–π—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å —Å –∏–Ω–¥–µ–∫—Å–æ–º –¥–ª—è –ª—É—á—à–µ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏</p>
              </div>
              <div className="space-y-2">
                <p className="font-medium text-slate-900">üìè –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</p>
                <p className="text-xs">–ü–ª–æ—â–∞–¥—å –∏ —ç—Ç–∞–∂–Ω–æ—Å—Ç—å –ø–æ–º–æ–≥—É—Ç –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞–±–æ—Ç</p>
              </div>
              <div className="space-y-2">
                <p className="font-medium text-slate-900">üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã</p>
                <p className="text-xs">–£–∫–∞–∂–∏—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞ –æ–±—ä–µ–∫—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Å–≤—è–∑–∏</p>
              </div>
            </CardContent>
          </Card>

          <Card className="border-green-200 bg-green-50">
            <CardHeader>
              <CardTitle className="text-base flex items-center gap-2">
                <Icon name="Info" className="text-green-600" size={18} />
                –ß—Ç–æ –¥–∞–ª—å—à–µ?
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-2 text-xs text-slate-700">
              <div className="flex gap-2">
                <span className="font-bold text-green-600">1.</span>
                <p>–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ –≤–∏–¥—ã —Ä–∞–±–æ—Ç –Ω–∞ –æ–±—ä–µ–∫—Ç–µ</p>
              </div>
              <div className="flex gap-2">
                <span className="font-bold text-green-600">2.</span>
                <p>–ù–∞–∑–Ω–∞—á—å—Ç–µ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤ –Ω–∞ –∫–∞–∂–¥—É—é —Ä–∞–±–æ—Ç—É</p>
              </div>
              <div className="flex gap-2">
                <span className="font-bold text-green-600">3.</span>
                <p>–ù–∞—á–Ω–∏—Ç–µ –≤–µ—Å—Ç–∏ –∂—É—Ä–Ω–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç</p>
              </div>
            </CardContent>
          </Card>
        </aside>
        </div>
      </form>
    </div>
  );
};

export default CreateObject;