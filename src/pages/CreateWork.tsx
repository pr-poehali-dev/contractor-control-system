import { useState } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { api } from '@/lib/api';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import Icon from '@/components/ui/icon';
import { useToast } from '@/hooks/use-toast';

const CreateWork = () => {
  const { projectId, objectId } = useParams();
  const navigate = useNavigate();
  const { toast } = useToast();
  const { user, setUserData } = useAuth();
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    volume: '',
    unit: '',
    start_date: '',
    end_date: '',
    estimated_cost: '',
    contractor_id: '',
    priority: 'medium',
  });
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.title.trim()) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã',
        variant: 'destructive',
      });
      return;
    }

    if (!user || !objectId) return;

    setIsSubmitting(true);

    try {
      const result = await api.createItem(user.id, 'work', {
        object_id: Number(objectId),
        title: formData.title,
        description: formData.description,
        status: 'active',
      });

      const newWorkId = result.data.id;
      
      const refreshedData = await api.getUserData(user.id);
      setUserData(refreshedData);
      localStorage.setItem('userData', JSON.stringify(refreshedData));

      toast({
        title: '–†–∞–±–æ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!',
        description: `–†–∞–±–æ—Ç–∞ "${formData.title}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞`,
      });

      setTimeout(() => {
        navigate(`/projects/${projectId}/objects/${objectId}/works/${newWorkId}`);
      }, 300);
    } catch (error) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É',
        variant: 'destructive',
      });
      setIsSubmitting(false);
    }
  };

  return (
    <div className="min-h-screen bg-slate-50 p-4 md:p-8 pb-24 md:pb-8">
      <Button 
        variant="ghost" 
        className="mb-6"
        onClick={() => navigate(`/projects/${projectId}/objects/${objectId}`)}
      >
        <Icon name="ChevronLeft" size={20} className="mr-2" />
        –ö –æ–±—ä–µ–∫—Ç—É
      </Button>

      <div className="mb-8">
        <h1 className="text-2xl md:text-3xl font-bold text-slate-900 mb-2">–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã</h1>
        <p className="text-slate-600">–£–∫–∞–∂–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞</p>
      </div>

      <form onSubmit={handleSubmit}>
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div className="lg:col-span-2 space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="title">–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã *</Label>
                <Input
                  id="title"
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ó–∞–º–µ–Ω–∞ –∫—Ä–æ–≤–ª–∏"
                  value={formData.title}
                  onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                  required
                  autoFocus
                  data-tour="work-title-input"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="description">–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç</Label>
                <Textarea
                  id="description"
                  placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç..."
                  rows={4}
                  value={formData.description}
                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                />
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="volume">–û–±—ä—ë–º —Ä–∞–±–æ—Ç</Label>
                  <Input
                    id="volume"
                    type="number"
                    placeholder="0"
                    value={formData.volume}
                    onChange={(e) => setFormData({ ...formData, volume: e.target.value })}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="unit">–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è</Label>
                  <Input
                    id="unit"
                    placeholder="–º¬≤, –º¬≥, —à—Ç..."
                    value={formData.unit}
                    onChange={(e) => setFormData({ ...formData, unit: e.target.value })}
                  />
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="start_date">–ü–ª–∞–Ω–æ–≤–æ–µ –Ω–∞—á–∞–ª–æ</Label>
                  <Input
                    id="start_date"
                    type="date"
                    value={formData.start_date}
                    onChange={(e) => setFormData({ ...formData, start_date: e.target.value })}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="end_date">–ü–ª–∞–Ω–æ–≤–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ</Label>
                  <Input
                    id="end_date"
                    type="date"
                    value={formData.end_date}
                    onChange={(e) => setFormData({ ...formData, end_date: e.target.value })}
                  />
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="estimated_cost">–ü–ª–∞–Ω–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±.)</Label>
                  <Input
                    id="estimated_cost"
                    type="number"
                    placeholder="0"
                    value={formData.estimated_cost}
                    onChange={(e) => setFormData({ ...formData, estimated_cost: e.target.value })}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="priority">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</Label>
                  <Select value={formData.priority} onValueChange={(value) => setFormData({ ...formData, priority: value })}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="low">–ù–∏–∑–∫–∏–π</SelectItem>
                      <SelectItem value="medium">–°—Ä–µ–¥–Ω–∏–π</SelectItem>
                      <SelectItem value="high">–í—ã—Å–æ–∫–∏–π</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </CardContent>
          </Card>

          <div className="flex flex-col md:flex-row gap-3 lg:col-span-2">
          <Button 
            type="submit" 
            size="lg" 
            className="md:min-w-[200px]"
            disabled={isSubmitting}
            data-tour="create-work-submit"
          >
            {isSubmitting ? (
              <>
                <Icon name="Loader2" size={20} className="mr-2 animate-spin" />
                –°–æ–∑–¥–∞–Ω–∏–µ...
              </>
            ) : (
              <>
                <Icon name="Save" size={20} className="mr-2" />
                –°–æ–∑–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É
              </>
            )}
          </Button>
          <Button 
            type="button" 
            variant="outline" 
            size="lg"
            onClick={() => navigate(`/projects/${projectId}/objects/${objectId}`)}
            disabled={isSubmitting}
          >
            –û—Ç–º–µ–Ω–∞
          </Button>
          </div>
        </div>

        <aside className="space-y-6">
          <Card className="bg-gradient-to-br from-blue-50 to-indigo-50 border-blue-200">
            <CardHeader>
              <CardTitle className="text-base flex items-center gap-2">
                <Icon name="Lightbulb" className="text-blue-600" size={18} />
                –°–æ–≤–µ—Ç—ã –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-3 text-sm text-slate-700">
              <div className="space-y-2">
                <p className="font-medium text-slate-900">üìë –û–ø–∏—Å–∞–Ω–∏–µ</p>
                <p className="text-xs">–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é</p>
              </div>
              <div className="space-y-2">
                <p className="font-medium text-slate-900">üìÖ –°—Ä–æ–∫–∏</p>
                <p className="text-xs">–£—á–∏—Ç—ã–≤–∞–π—Ç–µ –≤—Ä–µ–º—è –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏</p>
              </div>
              <div className="space-y-2">
                <p className="font-medium text-slate-900">üî• –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</p>
                <p className="text-xs">–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ä–∞–±–æ—Ç –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º –ø—É—Ç–∏</p>
              </div>
            </CardContent>
          </Card>

          <Card className="border-green-200 bg-green-50">
            <CardHeader>
              <CardTitle className="text-base flex items-center gap-2">
                <Icon name="Info" className="text-green-600" size={18} />
                –ß—Ç–æ –¥–∞–ª—å—à–µ?
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-2 text-xs text-slate-700">
              <div className="flex gap-2">
                <span className="font-bold text-green-600">1.</span>
                <p>–ù–∞–∑–Ω–∞—á—å—Ç–µ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É</p>
              </div>
              <div className="flex gap-2">
                <span className="font-bold text-green-600">2.</span>
                <p>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª–µ —Ä–∞–±–æ—Ç</p>
              </div>
              <div className="flex gap-2">
                <span className="font-bold text-green-600">3.</span>
                <p>–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –≤–Ω–æ—Å–∏—Ç–µ –∑–∞–º–µ—á–∞–Ω–∏—è</p>
              </div>
            </CardContent>
          </Card>
        </aside>
        </div>
      </form>
    </div>
  );
};

export default CreateWork;